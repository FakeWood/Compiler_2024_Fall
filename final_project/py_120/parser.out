Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt
Rule 3     stmt_list -> stmt stmt_list
Rule 4     stmt -> expr
Rule 5     stmt -> def_stmt
Rule 6     stmt -> print_stmt
Rule 7     print_stmt -> LPAREN PRINT_NUM expr RPAREN
Rule 8     print_stmt -> LPAREN PRINT_BOOL expr RPAREN
Rule 9     expr -> BOOL_VAL
Rule 10    expr -> NUMBER
Rule 11    expr -> ID
Rule 12    expr -> num_op
Rule 13    expr -> logical_op
Rule 14    expr -> func_expr
Rule 15    expr -> func_call
Rule 16    expr -> if_expr
Rule 17    num_op -> LPAREN PLUS expr expr_list RPAREN
Rule 18    num_op -> LPAREN MINUS expr expr RPAREN
Rule 19    num_op -> LPAREN MULTIPLY expr expr_list RPAREN
Rule 20    num_op -> LPAREN DIVIDE expr expr RPAREN
Rule 21    num_op -> LPAREN MODULUS expr expr RPAREN
Rule 22    num_op -> LPAREN GREATER expr expr RPAREN
Rule 23    num_op -> LPAREN SMALLER expr expr RPAREN
Rule 24    num_op -> LPAREN EQUAL expr expr_list RPAREN
Rule 25    expr_list -> expr
Rule 26    expr_list -> expr expr_list
Rule 27    logical_op -> LPAREN AND expr expr_list RPAREN
Rule 28    logical_op -> LPAREN OR expr expr_list RPAREN
Rule 29    logical_op -> LPAREN NOT expr RPAREN
Rule 30    def_stmt -> LPAREN DEFINE ID expr RPAREN
Rule 31    func_expr -> LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
Rule 32    func_params -> <empty>
Rule 33    func_params -> ID func_params
Rule 34    func_body -> expr
Rule 35    func_body -> def_stmt expr
Rule 36    func_call -> LPAREN func_expr param_list RPAREN
Rule 37    func_call -> LPAREN ID param_list RPAREN
Rule 38    param_list -> <empty>
Rule 39    param_list -> param param_list
Rule 40    param -> expr
Rule 41    if_expr -> LPAREN IF expr expr expr RPAREN

Terminals, with rules where they appear

AND                  : 27
BOOL_VAL             : 9
DEFINE               : 30
DIVIDE               : 20
EQUAL                : 24
FUN                  : 31
GREATER              : 22
ID                   : 11 30 33 37
IF                   : 41
LPAREN               : 7 8 17 18 19 20 21 22 23 24 27 28 29 30 31 31 36 37 41
MINUS                : 18
MODULUS              : 21
MULTIPLY             : 19
NOT                  : 29
NUMBER               : 10
OR                   : 28
PLUS                 : 17
PRINT_BOOL           : 8
PRINT_NUM            : 7
RPAREN               : 7 8 17 18 19 20 21 22 23 24 27 28 29 30 31 31 36 37 41
SMALLER              : 23
error                : 

Nonterminals, with rules where they appear

def_stmt             : 5 35
expr                 : 4 7 8 17 18 18 19 20 20 21 21 22 22 23 23 24 25 26 27 28 29 30 34 35 40 41 41 41
expr_list            : 17 19 24 26 27 28
func_body            : 31
func_call            : 15
func_expr            : 14 36
func_params          : 31 33
if_expr              : 16
logical_op           : 13
num_op               : 12
param                : 39
param_list           : 36 37 39
print_stmt           : 6
program              : 0
stmt                 : 2 3
stmt_list            : 1 3

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt
    (3) stmt_list -> . stmt stmt_list
    (4) stmt -> . expr
    (5) stmt -> . def_stmt
    (6) stmt -> . print_stmt
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (30) def_stmt -> . LPAREN DEFINE ID expr RPAREN
    (7) print_stmt -> . LPAREN PRINT_NUM expr RPAREN
    (8) print_stmt -> . LPAREN PRINT_BOOL expr RPAREN
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 15

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    def_stmt                       shift and go to state 5
    print_stmt                     shift and go to state 6
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .

    $end            reduce using rule 1 (program -> stmt_list .)


state 3

    (2) stmt_list -> stmt .
    (3) stmt_list -> stmt . stmt_list
    (2) stmt_list -> . stmt
    (3) stmt_list -> . stmt stmt_list
    (4) stmt -> . expr
    (5) stmt -> . def_stmt
    (6) stmt -> . print_stmt
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (30) def_stmt -> . LPAREN DEFINE ID expr RPAREN
    (7) print_stmt -> . LPAREN PRINT_NUM expr RPAREN
    (8) print_stmt -> . LPAREN PRINT_BOOL expr RPAREN
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    $end            reduce using rule 2 (stmt_list -> stmt .)
    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 15

    stmt                           shift and go to state 3
    stmt_list                      shift and go to state 16
    expr                           shift and go to state 4
    def_stmt                       shift and go to state 5
    print_stmt                     shift and go to state 6
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 4

    (4) stmt -> expr .

    BOOL_VAL        reduce using rule 4 (stmt -> expr .)
    NUMBER          reduce using rule 4 (stmt -> expr .)
    ID              reduce using rule 4 (stmt -> expr .)
    LPAREN          reduce using rule 4 (stmt -> expr .)
    $end            reduce using rule 4 (stmt -> expr .)


state 5

    (5) stmt -> def_stmt .

    BOOL_VAL        reduce using rule 5 (stmt -> def_stmt .)
    NUMBER          reduce using rule 5 (stmt -> def_stmt .)
    ID              reduce using rule 5 (stmt -> def_stmt .)
    LPAREN          reduce using rule 5 (stmt -> def_stmt .)
    $end            reduce using rule 5 (stmt -> def_stmt .)


state 6

    (6) stmt -> print_stmt .

    BOOL_VAL        reduce using rule 6 (stmt -> print_stmt .)
    NUMBER          reduce using rule 6 (stmt -> print_stmt .)
    ID              reduce using rule 6 (stmt -> print_stmt .)
    LPAREN          reduce using rule 6 (stmt -> print_stmt .)
    $end            reduce using rule 6 (stmt -> print_stmt .)


state 7

    (9) expr -> BOOL_VAL .

    BOOL_VAL        reduce using rule 9 (expr -> BOOL_VAL .)
    NUMBER          reduce using rule 9 (expr -> BOOL_VAL .)
    ID              reduce using rule 9 (expr -> BOOL_VAL .)
    LPAREN          reduce using rule 9 (expr -> BOOL_VAL .)
    $end            reduce using rule 9 (expr -> BOOL_VAL .)
    RPAREN          reduce using rule 9 (expr -> BOOL_VAL .)


state 8

    (10) expr -> NUMBER .

    BOOL_VAL        reduce using rule 10 (expr -> NUMBER .)
    NUMBER          reduce using rule 10 (expr -> NUMBER .)
    ID              reduce using rule 10 (expr -> NUMBER .)
    LPAREN          reduce using rule 10 (expr -> NUMBER .)
    $end            reduce using rule 10 (expr -> NUMBER .)
    RPAREN          reduce using rule 10 (expr -> NUMBER .)


state 9

    (11) expr -> ID .

    BOOL_VAL        reduce using rule 11 (expr -> ID .)
    NUMBER          reduce using rule 11 (expr -> ID .)
    ID              reduce using rule 11 (expr -> ID .)
    LPAREN          reduce using rule 11 (expr -> ID .)
    $end            reduce using rule 11 (expr -> ID .)
    RPAREN          reduce using rule 11 (expr -> ID .)


state 10

    (12) expr -> num_op .

    BOOL_VAL        reduce using rule 12 (expr -> num_op .)
    NUMBER          reduce using rule 12 (expr -> num_op .)
    ID              reduce using rule 12 (expr -> num_op .)
    LPAREN          reduce using rule 12 (expr -> num_op .)
    $end            reduce using rule 12 (expr -> num_op .)
    RPAREN          reduce using rule 12 (expr -> num_op .)


state 11

    (13) expr -> logical_op .

    BOOL_VAL        reduce using rule 13 (expr -> logical_op .)
    NUMBER          reduce using rule 13 (expr -> logical_op .)
    ID              reduce using rule 13 (expr -> logical_op .)
    LPAREN          reduce using rule 13 (expr -> logical_op .)
    $end            reduce using rule 13 (expr -> logical_op .)
    RPAREN          reduce using rule 13 (expr -> logical_op .)


state 12

    (14) expr -> func_expr .

    BOOL_VAL        reduce using rule 14 (expr -> func_expr .)
    NUMBER          reduce using rule 14 (expr -> func_expr .)
    ID              reduce using rule 14 (expr -> func_expr .)
    LPAREN          reduce using rule 14 (expr -> func_expr .)
    $end            reduce using rule 14 (expr -> func_expr .)
    RPAREN          reduce using rule 14 (expr -> func_expr .)


state 13

    (15) expr -> func_call .

    BOOL_VAL        reduce using rule 15 (expr -> func_call .)
    NUMBER          reduce using rule 15 (expr -> func_call .)
    ID              reduce using rule 15 (expr -> func_call .)
    LPAREN          reduce using rule 15 (expr -> func_call .)
    $end            reduce using rule 15 (expr -> func_call .)
    RPAREN          reduce using rule 15 (expr -> func_call .)


state 14

    (16) expr -> if_expr .

    BOOL_VAL        reduce using rule 16 (expr -> if_expr .)
    NUMBER          reduce using rule 16 (expr -> if_expr .)
    ID              reduce using rule 16 (expr -> if_expr .)
    LPAREN          reduce using rule 16 (expr -> if_expr .)
    $end            reduce using rule 16 (expr -> if_expr .)
    RPAREN          reduce using rule 16 (expr -> if_expr .)


state 15

    (30) def_stmt -> LPAREN . DEFINE ID expr RPAREN
    (7) print_stmt -> LPAREN . PRINT_NUM expr RPAREN
    (8) print_stmt -> LPAREN . PRINT_BOOL expr RPAREN
    (17) num_op -> LPAREN . PLUS expr expr_list RPAREN
    (18) num_op -> LPAREN . MINUS expr expr RPAREN
    (19) num_op -> LPAREN . MULTIPLY expr expr_list RPAREN
    (20) num_op -> LPAREN . DIVIDE expr expr RPAREN
    (21) num_op -> LPAREN . MODULUS expr expr RPAREN
    (22) num_op -> LPAREN . GREATER expr expr RPAREN
    (23) num_op -> LPAREN . SMALLER expr expr RPAREN
    (24) num_op -> LPAREN . EQUAL expr expr_list RPAREN
    (27) logical_op -> LPAREN . AND expr expr_list RPAREN
    (28) logical_op -> LPAREN . OR expr expr_list RPAREN
    (29) logical_op -> LPAREN . NOT expr RPAREN
    (31) func_expr -> LPAREN . FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> LPAREN . func_expr param_list RPAREN
    (37) func_call -> LPAREN . ID param_list RPAREN
    (41) if_expr -> LPAREN . IF expr expr expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN

    DEFINE          shift and go to state 18
    PRINT_NUM       shift and go to state 20
    PRINT_BOOL      shift and go to state 21
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MULTIPLY        shift and go to state 24
    DIVIDE          shift and go to state 25
    MODULUS         shift and go to state 26
    GREATER         shift and go to state 27
    SMALLER         shift and go to state 28
    EQUAL           shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    NOT             shift and go to state 32
    FUN             shift and go to state 33
    ID              shift and go to state 19
    IF              shift and go to state 35
    LPAREN          shift and go to state 17

    func_expr                      shift and go to state 34

state 16

    (3) stmt_list -> stmt stmt_list .

    $end            reduce using rule 3 (stmt_list -> stmt stmt_list .)


state 17

    (31) func_expr -> LPAREN . FUN LPAREN func_params RPAREN func_body RPAREN

    FUN             shift and go to state 33


state 18

    (30) def_stmt -> LPAREN DEFINE . ID expr RPAREN

    ID              shift and go to state 36


state 19

    (37) func_call -> LPAREN ID . param_list RPAREN
    (38) param_list -> .
    (39) param_list -> . param param_list
    (40) param -> . expr
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    RPAREN          reduce using rule 38 (param_list -> .)
    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    param_list                     shift and go to state 38
    param                          shift and go to state 39
    expr                           shift and go to state 40
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 20

    (7) print_stmt -> LPAREN PRINT_NUM . expr RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 41
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 21

    (8) print_stmt -> LPAREN PRINT_BOOL . expr RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 42
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 22

    (17) num_op -> LPAREN PLUS . expr expr_list RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 43
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 23

    (18) num_op -> LPAREN MINUS . expr expr RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 44
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 24

    (19) num_op -> LPAREN MULTIPLY . expr expr_list RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 45
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 25

    (20) num_op -> LPAREN DIVIDE . expr expr RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 46
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 26

    (21) num_op -> LPAREN MODULUS . expr expr RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 47
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 27

    (22) num_op -> LPAREN GREATER . expr expr RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 48
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 28

    (23) num_op -> LPAREN SMALLER . expr expr RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 49
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 29

    (24) num_op -> LPAREN EQUAL . expr expr_list RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 50
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 30

    (27) logical_op -> LPAREN AND . expr expr_list RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 51
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 31

    (28) logical_op -> LPAREN OR . expr expr_list RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 52
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 32

    (29) logical_op -> LPAREN NOT . expr RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 53
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 33

    (31) func_expr -> LPAREN FUN . LPAREN func_params RPAREN func_body RPAREN

    LPAREN          shift and go to state 54


state 34

    (36) func_call -> LPAREN func_expr . param_list RPAREN
    (38) param_list -> .
    (39) param_list -> . param param_list
    (40) param -> . expr
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    RPAREN          reduce using rule 38 (param_list -> .)
    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    func_expr                      shift and go to state 12
    param_list                     shift and go to state 55
    param                          shift and go to state 39
    expr                           shift and go to state 40
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 35

    (41) if_expr -> LPAREN IF . expr expr expr RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 56
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 36

    (30) def_stmt -> LPAREN DEFINE ID . expr RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 57
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 37

    (17) num_op -> LPAREN . PLUS expr expr_list RPAREN
    (18) num_op -> LPAREN . MINUS expr expr RPAREN
    (19) num_op -> LPAREN . MULTIPLY expr expr_list RPAREN
    (20) num_op -> LPAREN . DIVIDE expr expr RPAREN
    (21) num_op -> LPAREN . MODULUS expr expr RPAREN
    (22) num_op -> LPAREN . GREATER expr expr RPAREN
    (23) num_op -> LPAREN . SMALLER expr expr RPAREN
    (24) num_op -> LPAREN . EQUAL expr expr_list RPAREN
    (27) logical_op -> LPAREN . AND expr expr_list RPAREN
    (28) logical_op -> LPAREN . OR expr expr_list RPAREN
    (29) logical_op -> LPAREN . NOT expr RPAREN
    (31) func_expr -> LPAREN . FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> LPAREN . func_expr param_list RPAREN
    (37) func_call -> LPAREN . ID param_list RPAREN
    (41) if_expr -> LPAREN . IF expr expr expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN

    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MULTIPLY        shift and go to state 24
    DIVIDE          shift and go to state 25
    MODULUS         shift and go to state 26
    GREATER         shift and go to state 27
    SMALLER         shift and go to state 28
    EQUAL           shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    NOT             shift and go to state 32
    FUN             shift and go to state 33
    ID              shift and go to state 19
    IF              shift and go to state 35
    LPAREN          shift and go to state 17

    func_expr                      shift and go to state 34

state 38

    (37) func_call -> LPAREN ID param_list . RPAREN

    RPAREN          shift and go to state 58


state 39

    (39) param_list -> param . param_list
    (38) param_list -> .
    (39) param_list -> . param param_list
    (40) param -> . expr
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    RPAREN          reduce using rule 38 (param_list -> .)
    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    param                          shift and go to state 39
    param_list                     shift and go to state 59
    expr                           shift and go to state 40
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 40

    (40) param -> expr .

    BOOL_VAL        reduce using rule 40 (param -> expr .)
    NUMBER          reduce using rule 40 (param -> expr .)
    ID              reduce using rule 40 (param -> expr .)
    LPAREN          reduce using rule 40 (param -> expr .)
    RPAREN          reduce using rule 40 (param -> expr .)


state 41

    (7) print_stmt -> LPAREN PRINT_NUM expr . RPAREN

    RPAREN          shift and go to state 60


state 42

    (8) print_stmt -> LPAREN PRINT_BOOL expr . RPAREN

    RPAREN          shift and go to state 61


state 43

    (17) num_op -> LPAREN PLUS expr . expr_list RPAREN
    (25) expr_list -> . expr
    (26) expr_list -> . expr expr_list
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 62
    expr_list                      shift and go to state 63
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 44

    (18) num_op -> LPAREN MINUS expr . expr RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 64
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 45

    (19) num_op -> LPAREN MULTIPLY expr . expr_list RPAREN
    (25) expr_list -> . expr
    (26) expr_list -> . expr expr_list
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 62
    expr_list                      shift and go to state 65
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 46

    (20) num_op -> LPAREN DIVIDE expr . expr RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 66
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 47

    (21) num_op -> LPAREN MODULUS expr . expr RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 67
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 48

    (22) num_op -> LPAREN GREATER expr . expr RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 68
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 49

    (23) num_op -> LPAREN SMALLER expr . expr RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 69
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 50

    (24) num_op -> LPAREN EQUAL expr . expr_list RPAREN
    (25) expr_list -> . expr
    (26) expr_list -> . expr expr_list
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 62
    expr_list                      shift and go to state 70
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 51

    (27) logical_op -> LPAREN AND expr . expr_list RPAREN
    (25) expr_list -> . expr
    (26) expr_list -> . expr expr_list
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 62
    expr_list                      shift and go to state 71
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 52

    (28) logical_op -> LPAREN OR expr . expr_list RPAREN
    (25) expr_list -> . expr
    (26) expr_list -> . expr expr_list
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 62
    expr_list                      shift and go to state 72
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 53

    (29) logical_op -> LPAREN NOT expr . RPAREN

    RPAREN          shift and go to state 73


state 54

    (31) func_expr -> LPAREN FUN LPAREN . func_params RPAREN func_body RPAREN
    (32) func_params -> .
    (33) func_params -> . ID func_params

    RPAREN          reduce using rule 32 (func_params -> .)
    ID              shift and go to state 75

    func_params                    shift and go to state 74

state 55

    (36) func_call -> LPAREN func_expr param_list . RPAREN

    RPAREN          shift and go to state 76


state 56

    (41) if_expr -> LPAREN IF expr . expr expr RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 77
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 57

    (30) def_stmt -> LPAREN DEFINE ID expr . RPAREN

    RPAREN          shift and go to state 78


state 58

    (37) func_call -> LPAREN ID param_list RPAREN .

    BOOL_VAL        reduce using rule 37 (func_call -> LPAREN ID param_list RPAREN .)
    NUMBER          reduce using rule 37 (func_call -> LPAREN ID param_list RPAREN .)
    ID              reduce using rule 37 (func_call -> LPAREN ID param_list RPAREN .)
    LPAREN          reduce using rule 37 (func_call -> LPAREN ID param_list RPAREN .)
    $end            reduce using rule 37 (func_call -> LPAREN ID param_list RPAREN .)
    RPAREN          reduce using rule 37 (func_call -> LPAREN ID param_list RPAREN .)


state 59

    (39) param_list -> param param_list .

    RPAREN          reduce using rule 39 (param_list -> param param_list .)


state 60

    (7) print_stmt -> LPAREN PRINT_NUM expr RPAREN .

    BOOL_VAL        reduce using rule 7 (print_stmt -> LPAREN PRINT_NUM expr RPAREN .)
    NUMBER          reduce using rule 7 (print_stmt -> LPAREN PRINT_NUM expr RPAREN .)
    ID              reduce using rule 7 (print_stmt -> LPAREN PRINT_NUM expr RPAREN .)
    LPAREN          reduce using rule 7 (print_stmt -> LPAREN PRINT_NUM expr RPAREN .)
    $end            reduce using rule 7 (print_stmt -> LPAREN PRINT_NUM expr RPAREN .)


state 61

    (8) print_stmt -> LPAREN PRINT_BOOL expr RPAREN .

    BOOL_VAL        reduce using rule 8 (print_stmt -> LPAREN PRINT_BOOL expr RPAREN .)
    NUMBER          reduce using rule 8 (print_stmt -> LPAREN PRINT_BOOL expr RPAREN .)
    ID              reduce using rule 8 (print_stmt -> LPAREN PRINT_BOOL expr RPAREN .)
    LPAREN          reduce using rule 8 (print_stmt -> LPAREN PRINT_BOOL expr RPAREN .)
    $end            reduce using rule 8 (print_stmt -> LPAREN PRINT_BOOL expr RPAREN .)


state 62

    (25) expr_list -> expr .
    (26) expr_list -> expr . expr_list
    (25) expr_list -> . expr
    (26) expr_list -> . expr expr_list
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    RPAREN          reduce using rule 25 (expr_list -> expr .)
    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 62
    expr_list                      shift and go to state 79
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 63

    (17) num_op -> LPAREN PLUS expr expr_list . RPAREN

    RPAREN          shift and go to state 80


state 64

    (18) num_op -> LPAREN MINUS expr expr . RPAREN

    RPAREN          shift and go to state 81


state 65

    (19) num_op -> LPAREN MULTIPLY expr expr_list . RPAREN

    RPAREN          shift and go to state 82


state 66

    (20) num_op -> LPAREN DIVIDE expr expr . RPAREN

    RPAREN          shift and go to state 83


state 67

    (21) num_op -> LPAREN MODULUS expr expr . RPAREN

    RPAREN          shift and go to state 84


state 68

    (22) num_op -> LPAREN GREATER expr expr . RPAREN

    RPAREN          shift and go to state 85


state 69

    (23) num_op -> LPAREN SMALLER expr expr . RPAREN

    RPAREN          shift and go to state 86


state 70

    (24) num_op -> LPAREN EQUAL expr expr_list . RPAREN

    RPAREN          shift and go to state 87


state 71

    (27) logical_op -> LPAREN AND expr expr_list . RPAREN

    RPAREN          shift and go to state 88


state 72

    (28) logical_op -> LPAREN OR expr expr_list . RPAREN

    RPAREN          shift and go to state 89


state 73

    (29) logical_op -> LPAREN NOT expr RPAREN .

    BOOL_VAL        reduce using rule 29 (logical_op -> LPAREN NOT expr RPAREN .)
    NUMBER          reduce using rule 29 (logical_op -> LPAREN NOT expr RPAREN .)
    ID              reduce using rule 29 (logical_op -> LPAREN NOT expr RPAREN .)
    LPAREN          reduce using rule 29 (logical_op -> LPAREN NOT expr RPAREN .)
    $end            reduce using rule 29 (logical_op -> LPAREN NOT expr RPAREN .)
    RPAREN          reduce using rule 29 (logical_op -> LPAREN NOT expr RPAREN .)


state 74

    (31) func_expr -> LPAREN FUN LPAREN func_params . RPAREN func_body RPAREN

    RPAREN          shift and go to state 90


state 75

    (33) func_params -> ID . func_params
    (32) func_params -> .
    (33) func_params -> . ID func_params

    RPAREN          reduce using rule 32 (func_params -> .)
    ID              shift and go to state 75

    func_params                    shift and go to state 91

state 76

    (36) func_call -> LPAREN func_expr param_list RPAREN .

    BOOL_VAL        reduce using rule 36 (func_call -> LPAREN func_expr param_list RPAREN .)
    NUMBER          reduce using rule 36 (func_call -> LPAREN func_expr param_list RPAREN .)
    ID              reduce using rule 36 (func_call -> LPAREN func_expr param_list RPAREN .)
    LPAREN          reduce using rule 36 (func_call -> LPAREN func_expr param_list RPAREN .)
    $end            reduce using rule 36 (func_call -> LPAREN func_expr param_list RPAREN .)
    RPAREN          reduce using rule 36 (func_call -> LPAREN func_expr param_list RPAREN .)


state 77

    (41) if_expr -> LPAREN IF expr expr . expr RPAREN
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 92
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 78

    (30) def_stmt -> LPAREN DEFINE ID expr RPAREN .

    BOOL_VAL        reduce using rule 30 (def_stmt -> LPAREN DEFINE ID expr RPAREN .)
    NUMBER          reduce using rule 30 (def_stmt -> LPAREN DEFINE ID expr RPAREN .)
    ID              reduce using rule 30 (def_stmt -> LPAREN DEFINE ID expr RPAREN .)
    LPAREN          reduce using rule 30 (def_stmt -> LPAREN DEFINE ID expr RPAREN .)
    $end            reduce using rule 30 (def_stmt -> LPAREN DEFINE ID expr RPAREN .)


state 79

    (26) expr_list -> expr expr_list .

    RPAREN          reduce using rule 26 (expr_list -> expr expr_list .)


state 80

    (17) num_op -> LPAREN PLUS expr expr_list RPAREN .

    BOOL_VAL        reduce using rule 17 (num_op -> LPAREN PLUS expr expr_list RPAREN .)
    NUMBER          reduce using rule 17 (num_op -> LPAREN PLUS expr expr_list RPAREN .)
    ID              reduce using rule 17 (num_op -> LPAREN PLUS expr expr_list RPAREN .)
    LPAREN          reduce using rule 17 (num_op -> LPAREN PLUS expr expr_list RPAREN .)
    $end            reduce using rule 17 (num_op -> LPAREN PLUS expr expr_list RPAREN .)
    RPAREN          reduce using rule 17 (num_op -> LPAREN PLUS expr expr_list RPAREN .)


state 81

    (18) num_op -> LPAREN MINUS expr expr RPAREN .

    BOOL_VAL        reduce using rule 18 (num_op -> LPAREN MINUS expr expr RPAREN .)
    NUMBER          reduce using rule 18 (num_op -> LPAREN MINUS expr expr RPAREN .)
    ID              reduce using rule 18 (num_op -> LPAREN MINUS expr expr RPAREN .)
    LPAREN          reduce using rule 18 (num_op -> LPAREN MINUS expr expr RPAREN .)
    $end            reduce using rule 18 (num_op -> LPAREN MINUS expr expr RPAREN .)
    RPAREN          reduce using rule 18 (num_op -> LPAREN MINUS expr expr RPAREN .)


state 82

    (19) num_op -> LPAREN MULTIPLY expr expr_list RPAREN .

    BOOL_VAL        reduce using rule 19 (num_op -> LPAREN MULTIPLY expr expr_list RPAREN .)
    NUMBER          reduce using rule 19 (num_op -> LPAREN MULTIPLY expr expr_list RPAREN .)
    ID              reduce using rule 19 (num_op -> LPAREN MULTIPLY expr expr_list RPAREN .)
    LPAREN          reduce using rule 19 (num_op -> LPAREN MULTIPLY expr expr_list RPAREN .)
    $end            reduce using rule 19 (num_op -> LPAREN MULTIPLY expr expr_list RPAREN .)
    RPAREN          reduce using rule 19 (num_op -> LPAREN MULTIPLY expr expr_list RPAREN .)


state 83

    (20) num_op -> LPAREN DIVIDE expr expr RPAREN .

    BOOL_VAL        reduce using rule 20 (num_op -> LPAREN DIVIDE expr expr RPAREN .)
    NUMBER          reduce using rule 20 (num_op -> LPAREN DIVIDE expr expr RPAREN .)
    ID              reduce using rule 20 (num_op -> LPAREN DIVIDE expr expr RPAREN .)
    LPAREN          reduce using rule 20 (num_op -> LPAREN DIVIDE expr expr RPAREN .)
    $end            reduce using rule 20 (num_op -> LPAREN DIVIDE expr expr RPAREN .)
    RPAREN          reduce using rule 20 (num_op -> LPAREN DIVIDE expr expr RPAREN .)


state 84

    (21) num_op -> LPAREN MODULUS expr expr RPAREN .

    BOOL_VAL        reduce using rule 21 (num_op -> LPAREN MODULUS expr expr RPAREN .)
    NUMBER          reduce using rule 21 (num_op -> LPAREN MODULUS expr expr RPAREN .)
    ID              reduce using rule 21 (num_op -> LPAREN MODULUS expr expr RPAREN .)
    LPAREN          reduce using rule 21 (num_op -> LPAREN MODULUS expr expr RPAREN .)
    $end            reduce using rule 21 (num_op -> LPAREN MODULUS expr expr RPAREN .)
    RPAREN          reduce using rule 21 (num_op -> LPAREN MODULUS expr expr RPAREN .)


state 85

    (22) num_op -> LPAREN GREATER expr expr RPAREN .

    BOOL_VAL        reduce using rule 22 (num_op -> LPAREN GREATER expr expr RPAREN .)
    NUMBER          reduce using rule 22 (num_op -> LPAREN GREATER expr expr RPAREN .)
    ID              reduce using rule 22 (num_op -> LPAREN GREATER expr expr RPAREN .)
    LPAREN          reduce using rule 22 (num_op -> LPAREN GREATER expr expr RPAREN .)
    $end            reduce using rule 22 (num_op -> LPAREN GREATER expr expr RPAREN .)
    RPAREN          reduce using rule 22 (num_op -> LPAREN GREATER expr expr RPAREN .)


state 86

    (23) num_op -> LPAREN SMALLER expr expr RPAREN .

    BOOL_VAL        reduce using rule 23 (num_op -> LPAREN SMALLER expr expr RPAREN .)
    NUMBER          reduce using rule 23 (num_op -> LPAREN SMALLER expr expr RPAREN .)
    ID              reduce using rule 23 (num_op -> LPAREN SMALLER expr expr RPAREN .)
    LPAREN          reduce using rule 23 (num_op -> LPAREN SMALLER expr expr RPAREN .)
    $end            reduce using rule 23 (num_op -> LPAREN SMALLER expr expr RPAREN .)
    RPAREN          reduce using rule 23 (num_op -> LPAREN SMALLER expr expr RPAREN .)


state 87

    (24) num_op -> LPAREN EQUAL expr expr_list RPAREN .

    BOOL_VAL        reduce using rule 24 (num_op -> LPAREN EQUAL expr expr_list RPAREN .)
    NUMBER          reduce using rule 24 (num_op -> LPAREN EQUAL expr expr_list RPAREN .)
    ID              reduce using rule 24 (num_op -> LPAREN EQUAL expr expr_list RPAREN .)
    LPAREN          reduce using rule 24 (num_op -> LPAREN EQUAL expr expr_list RPAREN .)
    $end            reduce using rule 24 (num_op -> LPAREN EQUAL expr expr_list RPAREN .)
    RPAREN          reduce using rule 24 (num_op -> LPAREN EQUAL expr expr_list RPAREN .)


state 88

    (27) logical_op -> LPAREN AND expr expr_list RPAREN .

    BOOL_VAL        reduce using rule 27 (logical_op -> LPAREN AND expr expr_list RPAREN .)
    NUMBER          reduce using rule 27 (logical_op -> LPAREN AND expr expr_list RPAREN .)
    ID              reduce using rule 27 (logical_op -> LPAREN AND expr expr_list RPAREN .)
    LPAREN          reduce using rule 27 (logical_op -> LPAREN AND expr expr_list RPAREN .)
    $end            reduce using rule 27 (logical_op -> LPAREN AND expr expr_list RPAREN .)
    RPAREN          reduce using rule 27 (logical_op -> LPAREN AND expr expr_list RPAREN .)


state 89

    (28) logical_op -> LPAREN OR expr expr_list RPAREN .

    BOOL_VAL        reduce using rule 28 (logical_op -> LPAREN OR expr expr_list RPAREN .)
    NUMBER          reduce using rule 28 (logical_op -> LPAREN OR expr expr_list RPAREN .)
    ID              reduce using rule 28 (logical_op -> LPAREN OR expr expr_list RPAREN .)
    LPAREN          reduce using rule 28 (logical_op -> LPAREN OR expr expr_list RPAREN .)
    $end            reduce using rule 28 (logical_op -> LPAREN OR expr expr_list RPAREN .)
    RPAREN          reduce using rule 28 (logical_op -> LPAREN OR expr expr_list RPAREN .)


state 90

    (31) func_expr -> LPAREN FUN LPAREN func_params RPAREN . func_body RPAREN
    (34) func_body -> . expr
    (35) func_body -> . def_stmt expr
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (30) def_stmt -> . LPAREN DEFINE ID expr RPAREN
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 93

    func_body                      shift and go to state 94
    expr                           shift and go to state 95
    def_stmt                       shift and go to state 96
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 91

    (33) func_params -> ID func_params .

    RPAREN          reduce using rule 33 (func_params -> ID func_params .)


state 92

    (41) if_expr -> LPAREN IF expr expr expr . RPAREN

    RPAREN          shift and go to state 97


state 93

    (30) def_stmt -> LPAREN . DEFINE ID expr RPAREN
    (17) num_op -> LPAREN . PLUS expr expr_list RPAREN
    (18) num_op -> LPAREN . MINUS expr expr RPAREN
    (19) num_op -> LPAREN . MULTIPLY expr expr_list RPAREN
    (20) num_op -> LPAREN . DIVIDE expr expr RPAREN
    (21) num_op -> LPAREN . MODULUS expr expr RPAREN
    (22) num_op -> LPAREN . GREATER expr expr RPAREN
    (23) num_op -> LPAREN . SMALLER expr expr RPAREN
    (24) num_op -> LPAREN . EQUAL expr expr_list RPAREN
    (27) logical_op -> LPAREN . AND expr expr_list RPAREN
    (28) logical_op -> LPAREN . OR expr expr_list RPAREN
    (29) logical_op -> LPAREN . NOT expr RPAREN
    (31) func_expr -> LPAREN . FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> LPAREN . func_expr param_list RPAREN
    (37) func_call -> LPAREN . ID param_list RPAREN
    (41) if_expr -> LPAREN . IF expr expr expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN

    DEFINE          shift and go to state 18
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MULTIPLY        shift and go to state 24
    DIVIDE          shift and go to state 25
    MODULUS         shift and go to state 26
    GREATER         shift and go to state 27
    SMALLER         shift and go to state 28
    EQUAL           shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    NOT             shift and go to state 32
    FUN             shift and go to state 33
    ID              shift and go to state 19
    IF              shift and go to state 35
    LPAREN          shift and go to state 17

    func_expr                      shift and go to state 34

state 94

    (31) func_expr -> LPAREN FUN LPAREN func_params RPAREN func_body . RPAREN

    RPAREN          shift and go to state 98


state 95

    (34) func_body -> expr .

    RPAREN          reduce using rule 34 (func_body -> expr .)


state 96

    (35) func_body -> def_stmt . expr
    (9) expr -> . BOOL_VAL
    (10) expr -> . NUMBER
    (11) expr -> . ID
    (12) expr -> . num_op
    (13) expr -> . logical_op
    (14) expr -> . func_expr
    (15) expr -> . func_call
    (16) expr -> . if_expr
    (17) num_op -> . LPAREN PLUS expr expr_list RPAREN
    (18) num_op -> . LPAREN MINUS expr expr RPAREN
    (19) num_op -> . LPAREN MULTIPLY expr expr_list RPAREN
    (20) num_op -> . LPAREN DIVIDE expr expr RPAREN
    (21) num_op -> . LPAREN MODULUS expr expr RPAREN
    (22) num_op -> . LPAREN GREATER expr expr RPAREN
    (23) num_op -> . LPAREN SMALLER expr expr RPAREN
    (24) num_op -> . LPAREN EQUAL expr expr_list RPAREN
    (27) logical_op -> . LPAREN AND expr expr_list RPAREN
    (28) logical_op -> . LPAREN OR expr expr_list RPAREN
    (29) logical_op -> . LPAREN NOT expr RPAREN
    (31) func_expr -> . LPAREN FUN LPAREN func_params RPAREN func_body RPAREN
    (36) func_call -> . LPAREN func_expr param_list RPAREN
    (37) func_call -> . LPAREN ID param_list RPAREN
    (41) if_expr -> . LPAREN IF expr expr expr RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 9
    LPAREN          shift and go to state 37

    expr                           shift and go to state 99
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    func_expr                      shift and go to state 12
    func_call                      shift and go to state 13
    if_expr                        shift and go to state 14

state 97

    (41) if_expr -> LPAREN IF expr expr expr RPAREN .

    BOOL_VAL        reduce using rule 41 (if_expr -> LPAREN IF expr expr expr RPAREN .)
    NUMBER          reduce using rule 41 (if_expr -> LPAREN IF expr expr expr RPAREN .)
    ID              reduce using rule 41 (if_expr -> LPAREN IF expr expr expr RPAREN .)
    LPAREN          reduce using rule 41 (if_expr -> LPAREN IF expr expr expr RPAREN .)
    $end            reduce using rule 41 (if_expr -> LPAREN IF expr expr expr RPAREN .)
    RPAREN          reduce using rule 41 (if_expr -> LPAREN IF expr expr expr RPAREN .)


state 98

    (31) func_expr -> LPAREN FUN LPAREN func_params RPAREN func_body RPAREN .

    BOOL_VAL        reduce using rule 31 (func_expr -> LPAREN FUN LPAREN func_params RPAREN func_body RPAREN .)
    NUMBER          reduce using rule 31 (func_expr -> LPAREN FUN LPAREN func_params RPAREN func_body RPAREN .)
    ID              reduce using rule 31 (func_expr -> LPAREN FUN LPAREN func_params RPAREN func_body RPAREN .)
    LPAREN          reduce using rule 31 (func_expr -> LPAREN FUN LPAREN func_params RPAREN func_body RPAREN .)
    $end            reduce using rule 31 (func_expr -> LPAREN FUN LPAREN func_params RPAREN func_body RPAREN .)
    RPAREN          reduce using rule 31 (func_expr -> LPAREN FUN LPAREN func_params RPAREN func_body RPAREN .)


state 99

    (35) func_body -> def_stmt expr .

    RPAREN          reduce using rule 35 (func_body -> def_stmt expr .)

